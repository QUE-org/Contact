{"version":3,"sources":["components/Contact.jsx","App.js","serviceWorker.js","index.js"],"names":["Contact","props","contact","description","Fragment","contactTypes","titles","type","name","mail","affiliation","subject","content","placeholder","required","true","false","send","language","isRequired","input","className","Helmet","method","action","Form","Control","as","map","t","key","value","App","setLanguage","lang","setState","state","this","dropdown","DropdownButton","variant","title","id","Dropdown","Item","onSelect","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gQAuGeA,MAnGf,SAAiBC,GACf,IADsB,EAGF,CACnB,GAAM,CACJC,QAAS,uCACTC,YAAa,kBAAC,IAAMC,SAAP,8MAAiD,6BAAjD,oMAEbC,aAAc,CACX,qEACA,2EACA,sBAEHC,OAAQ,CACPC,KAAM,yDACNC,KAAM,qBACNC,KAAM,6CACNC,YAAa,qBACbC,QAAS,eACTC,QAAS,oDAEVC,YAAa,CACXL,KAAM,6BAERM,SAAU,CACRC,KAAM,eACNC,MAAO,gBAETC,KAAM,gBAEP,GAAK,CACHf,QAAS,UACTC,YAAa,kBAAC,IAAMC,SAAP,yEAAiF,6BAAjF,gDAEbC,aAAc,CACZ,sBACA,qBACA,SAEFC,OAAQ,CACNC,KAAM,qBACNC,KAAM,YACNC,KAAM,QACNC,YAAa,cACbC,QAAS,kBACTC,QAAS,WAEXC,YAAa,CACXL,KAAM,cAERM,SAAU,CACRC,KAAM,WACNC,MAAO,YAETC,KAAM,WAIoFhB,EAAMiB,UAA7FhB,EA1De,EA0DfA,QAASC,EA1DM,EA0DNA,YAAaE,EA1DP,EA0DOA,aAAcC,EA1DrB,EA0DqBA,OAAQO,EA1D7B,EA0D6BA,YAAaC,EA1D1C,EA0D0CA,SAAUG,EA1DpD,EA0DoDA,KAEpEE,EAAa,SAACC,GAClB,OACE,yBAAKC,UAAWD,EAAQ,WAAa,YAClCA,EAAQN,EAASC,KAAOD,EAASE,QAMxC,OACE,yBAAKK,UAAU,gBACb,kBAACC,EAAA,EAAD,KACE,sCAAYpB,IAEd,wBAAImB,UAAU,SAASnB,GACvB,2BAAKC,GACL,0BAAMoB,OAAO,OAAOC,OAAQ,kDAC1B,wBAAIH,UAAU,aAAaf,EAAOC,KAAlC,IAAwC,6BAAMY,GAAW,IACzD,kBAACM,EAAA,EAAKC,QAAN,CAAclB,KAAK,yDAAYmB,GAAG,UAE9BtB,EAAauB,KAAI,SAACC,GAAD,OAAQ,4BAAQC,IAAKD,EAAGE,MAAOF,GAAIA,OAGxD,wBAAIR,UAAU,aAAaf,EAAOE,KAAlC,IAAwC,6BAAMW,GAAW,IACzD,2BAAOZ,KAAK,OAAOC,KAAK,qBAAMK,YAAaA,EAAYL,OACvD,wBAAIa,UAAU,aAAaf,EAAOG,KAAlC,IAAwC,6BAAMU,GAAW,IACzD,2BAAOZ,KAAK,QAAQC,KAAK,qBAAMK,YAAY,oBAC3C,wBAAIQ,UAAU,aAAaf,EAAOI,YAAY,6BAAMS,GAAW,IAC/D,2BAAOZ,KAAK,OAAOC,KAAK,iBACxB,wBAAIa,UAAU,aAAaf,EAAOK,QAAQ,6BAAMQ,GAAW,IAC3D,2BAAOZ,KAAK,OAAOC,KAAK,iBACxB,wBAAIa,UAAU,aAAaf,EAAOM,QAAlC,IAA2C,6BAAMO,GAAW,IAC5D,8BAAUX,KAAK,qDACf,2BAAOa,UAAU,SAASd,KAAK,SAASwB,MAAOd,O,gBC7DxCe,E,kDA/Bb,WAAY/B,GAAO,IAAD,8BAChB,cAAMA,IAMRgC,YAAc,SAACC,GACb,EAAKC,SAAS,CACZjB,SAAUgB,KAPZ,EAAKE,MAAQ,CACXlB,SAAW,MAHG,E,qDAaR,IAAD,OACDA,EAAWmB,KAAKD,MAAMlB,SACtBoB,EAAW,kBAACC,EAAA,EAAD,CAAgBC,QAAQ,YAAYC,MAAM,WAAWC,GAAG,mBACvE,kBAACC,EAAA,EAASC,KAAV,CAAejB,GAAG,SAASkB,SAAU,kBAAM,EAAKZ,YAAY,QAA5D,sBACA,kBAACU,EAAA,EAASC,KAAV,CAAejB,GAAG,SAASkB,SAAU,kBAAM,EAAKZ,YAAY,QAA5D,YAEF,OACE,yBAAKZ,UAAU,QACb,yBAAKA,UAAU,UACb,4BAAkB,OAAbH,EAAoB,iFAAkB,gDAC1CoB,GAEH,kBAAC,EAAD,CAASpB,SAAUA,S,GA1BT4B,IAAMC,WCQJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.4f8f3029.chunk.js","sourcesContent":["import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport {Helmet} from 'react-helmet'\n\nfunction Contact(props) {\n  const mail = \"que.org.members@gmail.com\"\n\n  const translation = {\n   'ja' :{\n     contact: \"お問い合わせ\",\n     description: <React.Fragment>下記フォームをご記入いただいた上，「送信」ボタンを押してください。<br/>\n     お問い合わせの内容によっては、お時間を頂戴する場合がございます。</React.Fragment>,\n     contactTypes: [\n        \"イベントの内容について\",\n        \"イベント参加方法について\",\n        \"その他\"\n     ],\n     titles: {\n      type: \"お問い合わせの種類\",\n      name: \"お名前\",\n      mail: \"メールアドレス\",\n      affiliation: \"ご所属\",\n      subject: \"件名\",\n      content: \"お問い合わせ内容\"\n     },\n     placeholder: {\n       name: \"佐藤 太郎\"\n     },\n     required: {\n       true: \"必須\",\n       false: \"任意\"\n     },\n     send: \"送信\"\n    },\n    \"en\":{\n      contact: \"Contact\",\n      description: <React.Fragment>Please fill out the form below and click [submit] button to send.<br/>\n      We will get back to you as soon as possible.</React.Fragment>,\n      contactTypes: [\n        \"About event content\",\n        \"About registration\",\n        \"Other\"\n      ],\n      titles: {\n        type: \"Content of inquiry\",\n        name: \"Your name\",\n        mail: \"Email\",\n        affiliation: \"Affiliation\",\n        subject: \"Inquiry subject\",\n        content: \"Message\"\n      },\n      placeholder: {\n        name: \"Joe Bloggs\"\n      },\n      required: {\n        true: \"required\",\n        false: \"optional\"\n      },\n      send: \"Submit\"\n    },\n  }\n\n  const {contact, description, contactTypes, titles, placeholder, required, send} = translation[props.language]\n\n  const isRequired = (input) => {\n    return (\n      <div className={input ? \"required\" : \"optional\"}>\n        {input ? required.true : required.false}\n      </div>\n    )\n  }\n  \n\n  return (\n    <div className=\"contact-form\">\n      <Helmet>\n        <title>QUE {contact}</title>\n      </Helmet>\n      <h3 className=\"title\">{contact}</h3>\n      <p >{description}</p>\n      <form method=\"POST\" action={\"https://formspree.io/\" + mail} >\n        <h5 className=\"sec-title\">{titles.type} <br/>{isRequired(true)}</h5>\n        <Form.Control name='お問い合わせの種類' as=\"select\">\n          {\n            contactTypes.map((t) => (<option key={t} value={t}>{t}</option>))\n          }\n        </Form.Control>\n        <h5 className=\"sec-title\">{titles.name} <br/>{isRequired(true)}</h5>\n        <input type='text' name='お名前' placeholder={placeholder.name} />\n        <h5 className=\"sec-title\">{titles.mail} <br/>{isRequired(true)}</h5>\n        <input type=\"email\" name=\"返信先\" placeholder=\"you@example.com\"/>\n        <h5 className=\"sec-title\">{titles.affiliation}<br/>{isRequired(false)}</h5>\n        <input type='text' name='所属'  />\n        <h5 className=\"sec-title\">{titles.subject}<br/>{isRequired(true)}</h5>\n        <input type='text' name='件名' />\n        <h5 className=\"sec-title\">{titles.content} <br/>{isRequired(true)}</h5>\n        <textarea name='お問い合わせ内容'></textarea>\n        <input className='submit' type=\"submit\" value={send}/>\n      </form>\n    </div>\n  );\n}\n\nexport default Contact;","import React from 'react';\nimport Contact from './components/Contact';\nimport {Dropdown, DropdownButton} from 'react-bootstrap'\n\nclass App extends React.Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      language:  'ja'\n    }\n  }\n\n  setLanguage = (lang) => {\n    this.setState({\n      language: lang\n    })\n  }\n\n  render() {\n    const language = this.state.language\n    const dropdown = <DropdownButton variant=\"secondary\" title=\"Language\" id=\"language-select\">\n      <Dropdown.Item as=\"button\" onSelect={() => this.setLanguage('ja')} >日本語</Dropdown.Item>\n      <Dropdown.Item as=\"button\" onSelect={() => this.setLanguage('en')} >English</Dropdown.Item>\n    </DropdownButton>\n    return (\n      <div className=\"main\">\n        <div className=\"header\">\n          <h5>{language === \"ja\" ? \"国際シンポジウム実行委員会\" : \"International Symposium Organizing Committee\"}</h5>\n          {dropdown}\n        </div>\n        <Contact language={language}/>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}